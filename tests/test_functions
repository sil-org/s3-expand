#!/bin/bash
# Defines useful functions and runs tests

# TestStart
#     - Call this before a test, passing the test name as the first argument
#
# TestEnd
#     - Call this at the end of a test, with the exit status as the first
#       argument, and a message for the remaining arguments
#
#       ASCII SUB characters (032) in the message will be replaced with
#       newlines.
#
# Test
#     - Sources the filenames passed as arguments, running each as a single
#       test. The exit value of the file is the result value of the test. If
#       it is non-zero, the test is considered failed, and the output of the
#       file (both stdout and stderror) is printed as the error message.
#
# FinishTests
#     - Reports a summary of the tests that were run, and then exists with
#       status of 1 if any failed, or 0 if all passed.
#
#       However, if any positional parameters are in scope when this file is
#       sourced, FinishTests will instead act as a wrapper script, and exec
#       those positional parameters.

num_success=0
num_fail=0

red=$'\033[31m'
green=$'\033[32m'
blue=$'\033[34m'
darkgreen=$'\033[36m'
normal=$'\033[0m'

cat <<- EOF
	${darkgreen}=======================${normal}
	${darkgreen}    Starting Tests     ${normal}
	${darkgreen}=======================${normal}
	EOF

SAVE_FOR_LATER_JWGQL0O8="$@"

function TestStart () {
    cat  <<-EOF
	${blue}Running Test:${normal} $*
	EOF
}

function TestEnd () {
  declare -g num_success num_fail

  ret_val=$1
  shift 1

  if [[ $ret_val == 0 ]]; then
    num_success=$(( $num_success + 1 ))

    cat  <<-EOF
	${green}Test Succeeded!${normal}
	${green}Message/Output:${normal}
	EOF
    echo "$*" | tr '\32' '\n' | fold -s -w 76 | sed 's/^/  /'
  else
    num_fail=$(( $num_fail + 1 ))

    cat  <<-EOF
	${red}Test failed with status:${normal} $ret_val
	${red}Message/Output:${normal}
	EOF
    echo "$*" | tr '\32' '\n' | fold -s -w 76 | sed 's/^/  /'
  fi

  # For the newline
  echo
}

function Test () {
  for file in "$@"; do
    TestStart "$file"

    # If it is a directory, change to that directory
    dir="."
    if [[ -d $file ]]; then
      dir="$file"
    fi

    filename="$dir/$file"
    if ! [[ -a $filename ]]; then
      TestEnd 1 "Test file \`$filename' does not exist!"
    elif ! [[ -f $filename ]]; then
      TestEnd 1 "Test file \`$filename' is not a regular file!"
    elif ! [[ -r $filename ]]; then
      TestEnd 1 "Test file \`$filename' cannot be read!"
    else
      cd "$dir"
      set -o pipefail
      err_msg=$(source "$file" 2>&1 | tr '\n' '\32')
      TestEnd $? $err_msg
      set +o pipefail
      cd $OLDPWD
    fi
  done
}

function FinishTests () {
  declare -g num_success num_fail

  cat <<-EOF
	${darkgreen}=======================${normal}
	${darkgreen}Tests finished running:${normal}
	${darkgreen}=======================${normal}
	$num_success ${green}succeeded${normal}
	$num_fail ${red}failed${normal} 
	EOF

  if [[ $SAVE_FOR_LATER_JWGQL0O8 ]]; then
    exec "$SAVE_FOR_LATER_JWGQL0O8"
  else
    if [[ $num_fail != 0 ]]; then
      exit 1
    else
      exit 0
    fi
  fi
}
