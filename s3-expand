#!/bin/sh
# Wrapper script to build files using ENV variables
#set -x

usage () {
  echo "Usage: $0 command [args] ..."
  echo "       $0 -c <filename>"
  echo ""
  echo "This wrapper script uses the value of EXPAND_FILES as a key to dump"
  echo "env variables to files. Since newlines are not allowed in env"
  echo "variables, it converts the ascii SUB character (octal 32) to newline"
  echo "when it dumps the variables."
  echo ""
  echo "Run with the '-c' switch to convert files the other way, replacing"
  echo "newlines with the ascii SUB character (octal 32)"
  echo ""
  echo "  $0 -c filename >> env_file"
  echo ""
}

__cmd_check () {
  name=$1
  shift 1

  # See if the command is available, under any of the provided names
  # then define the named variable with its binary path
  for cmd in "$@"; do
    if hash "$cmd" 1>/dev/null 2>/dev/null; then
      eval $name="$cmd"
      return 0
    fi
  done

  return 1
}

cmd_check_require () {
  name=$1

  if ! __cmd_check "$@"; then
    echo "ERROR: no \`$name' equivalent found in path"
    exit 1
  fi
}

cmd_check () {
  name=$1

  if ! __cmd_check "$@"; then
    echo "WARNING: no \`$name' equivalent found in path"
  fi
}

# Standard regular expressions
REGEX_CHECK_MODE='^[0-7]\{1,4\}$'

# Ensure that we have the basics installed
cmd_check_require EXPR expr 
cmd_check_require CAT cat
cmd_check_require TR tr
cmd_check_require CUT cut
cmd_check_require DIRNAME dirname
cmd_check_require BASENAME basename
cmd_check_require GREP grep
cmd_check_require SED sed
cmd_check_require CHOWN chown 
cmd_check_require CHMOD chmod
cmd_check_require MKDIR mkdir
cmd_check_require TAR tar
cmd_check_require RM rm
cmd_check_require MKTEMP mktemp

# Need to have SOME arguments
if "$EXPR" $# "<" 1 1>/dev/null 2>/dev/null; then
  usage
  exit 1
fi

# Catch the Special Mode switches
if [ "$1" = '-c' ]; then
  if [ -z "$2" ]; then
    echo "ERROR: -c requires an argument"
    echo ""
    usage
    exit 1
  else
    "$CAT" $2 | "$TR" '\n' '\32'
    exit 0
  fi
fi

# Any other thing that looks like a switch will be passed to as an argument to `exec'.
# We don't want this.
if "$EXPR" match "$1" '^-' 1>/dev/null 2>/dev/null; then
  echo "ERROR: \`$1' is not a valid switch"
  echo ""
  usage
  exit 1
fi




# Expand Environmental Vars into Files
#
# EXPAND_FILES is a space-delimited list, iterative over it
for var in $EXPAND_FILES; do
  # Separate into the name of the ENV variable referenced,
  # and the target file to be created/replaced
  ev=$( echo $var | "$CUT" -d '=' -f 1 )
  target=$( echo $var | "$CUT" -d '=' -f 2- )
  basedir=$( "$DIRNAME" $target )

  # We need both to be defined, move on otherwise
  if [ -z "$ev" ] || [ -z "$target" ]; then
   echo "WARN: syntax error in EXPAND_FILES"
    continue;
  fi

  #Extract the metadata, if it is set
  meta=$( "$BASENAME" $target | "$GREP" -o '\[.*\]$' | "$SED" -e 's/^\[//' -e 's/\]$//' )
  file=$( echo $target | "$SED" 's/\(.*\)\[.*\]$/\1/' )

  perms=$( echo $meta | "$CUT" -d '|' -f 1)
  if echo $meta | "$GREP" '|' 1>/dev/null; then
    owner=$( echo $meta | "$CUT" -d '|' -f 2-)
  else
    owner=""
  fi

  # File must be defined, move on otherwise
  if [ -z "$file" ]; then
   echo "WARN: syntax error in EXPAND_FILES"
    continue;
  fi

  # Sanity Check the passed permissions
  if [ $perms ] && ! "$EXPR" match "$perms" "$REGEX_CHECK_MODE" 1>/dev/null 2>/dev/null; then
    echo "WARN: \`$perms' is not a valid file permission"
  fi


  # If the referenced variable doesn't exist then skip this entry
  if eval [ \"x\$\{$ev\}\" = \"x\" ]
  then
    echo "WARN: referenced variable named \`$ev' was not found in the environment"
    continue
  fi


  # Create the parent directory, if applicable
  if [ $basedir ]; then
    "$MKDIR" -p $basedir
  fi

  # Dump the value to the named file, running the conversion
  cmd="echo -n \${$ev}"
  eval $cmd | "$TR" "\32" "\n" > "$file"

  # Set the file's permissions, if applicable
  if [ $perms ]; then
    "$CHMOD" $perms $file
  fi

  # Set the file's owner, if applicable
  if [ $owner ]; then
    "$CHOWN" $owner $file
  fi

  # Unset the variable in the environment
  unset ${ev}
done
unset EXPAND_FILES




cmd_check S3CMD s3cmd
# Check for EXPAND_S3_KEY and EXPAND_S3_SECRET in the environment, useless otherwise
if [ $S3CMD ] && [ $EXPAND_S3_KEY ] && [ $EXPAND_S3_SECRET ]; then
  # Configure the credentials
  "$CAT" > ~/.s3cfg <<-EOF
	[default]
	access_key = $EXPAND_S3_KEY
	secret_key = $EXPAND_S3_SECRET
	EOF

  # Pull tarballs from S3
  # Space delimited list..
  for var in $EXPAND_S3_TARS; do
    # If there is no bar ("|"), the entry is invalid; move on
    if ! echo $var | "$GREP" '|' 1>/dev/null; then
      echo "WARN: syntax error in EXPAND_S3_TARS ; missing |"
      continue;
    fi

    # Separate out the tarball from its unpacking destination
    object=$( echo $var | "$CUT" -d '|' -f 1)
    target=$( echo $var | "$CUT" -d '|' -f 2-)

    # We need both to be defined, move on otherwise
    if [ -z "$object" ] || [ -z "$target" ]; then
      echo "WARN: syntax error in EXPAND_S3_TARS"
      continue;
    fi

    #Extract the metadata, if it is set
    meta=$( "$BASENAME" $target | "$GREP" -o '\[.*\]$' | "$SED" -e 's/^\[//' -e 's/\]$//' )
    targetdir=$( echo $target | "$SED" 's/\(.*\)\[.*\]$/\1/' )

    owner="$meta"

    # Targetdir must be defined, move on otherwise
    if [ -z "$targetdir" ]; then
      echo "WARN: syntax error in EXPAND_S3_TARS"
      continue;
    fi


    # Create a temporary filename for the tar
    temp_tar=$("$MKTEMP" -u)".tar"

    # Create the target directory if necessary
    "$MKDIR" -p $targetdir

    # Run the extraction, overwriting files if necessary
    "$S3CMD" --force get s3://$object "$temp_tar"
    
    # Untar it
    "$TAR" xf "$temp_tar" -C $targetdir

    # Set the file and directory ownership, if applicable
    if [ $owner ]; then
      "$CHOWN" -R $owner $targetdir
    fi

    # Clean Up the original tarball
    "$RM" "$temp_tar"
  done

  # Pull Individual files from S3
  # Space delimited list..
  for var in $EXPAND_S3_FILES; do
    # If there is no bar ("|"), the entry is invalid; move on
    if ! echo $var | "$GREP" '|' 1>/dev/null; then
      echo "WARN: syntax error in EXPAND_S3_FILES; missing |"
      continue;
    fi

    # Separate out the s3 source from the local destination
    object=$( echo $var | "$CUT" -d '|' -f 1)
    target=$( echo $var | "$CUT" -d '|' -f 2-)

    # We need both to be defined, move on otherwise
    if [ -z "$object" ] || [ -z "$target" ]; then
      echo "WARN: syntax error in EXPAND_S3_FILES"
      continue;
    fi

    #Extract the metadata, if it is set
    meta=$( "$BASENAME" $target | "$GREP" -o '\[.*\]$' | "$SED" -e 's/^\[//' -e 's/\]$//' )
    targetfile=$( echo $target | "$SED" 's/\(.*\)\[.*\]$/\1/' )

    perms=$( echo $meta | "$CUT" -d ',' -f 1)
    if echo $meta | "$GREP" ',' 1>/dev/null; then
      owner=$( echo $meta | "$CUT" -d ',' -f 2-)
    else
      owner=""
    fi

    # Targetdir must be defined, move on otherwise
    if [ -z "$targetfile" ]; then
      echo "WARN: syntax error in EXPAND_S3_FILES"
      continue;
    fi


    # Create the containing directory, if necessary
    if "$EXPR" match "$targetfile" '.*/$'; then
      "$MKDIR" -p $targetfile
    else
      "$MKDIR" -p $("$DIRNAME" $targetfile)
    fi

    # Run the extraction
    "$S3CMD" --force get s3://$object $targetfile

    # Set the file's permissions, if applicable
    if [ $perms ]; then
      "$CHMOD" $perms $targetfile
    fi

    # Set the file's owner, if applicable
    if [ $owner ]; then
      "$CHOWN" $owner $targetfile
    fi
  done

  # Pull Folders from S3 (trailing slash = just the contents, not the folder itself)
  # Space delimited list..
  for var in $EXPAND_S3_FOLDERS; do
    # If there is no bar ("|"), the entry is invalid; move on
    if ! echo $var | "$GREP" '|' 1>/dev/null; then
      echo "WARN: syntax error in EXPAND_S3_FOLDERS; missing |"
      continue;
    fi

    # Separate out the s3 source from the local destination
    object=$( echo $var | "$CUT" -d '|' -f 1)
    target=$( echo $var | "$CUT" -d '|' -f 2-)

    # We need both to be defined, move on otherwise
    if [ -z "$object" ] || [ -z "$target" ]; then
      echo "WARN: syntax error in EXPAND_S3_FOLDERS"
      continue;
    fi

    #Extract the metadata, if it is set
    meta=$( "$BASENAME" $target | "$GREP" -o '\[.*\]$' | "$SED" -e 's/^\[//' -e 's/\]$//' )
    targetfolder=$( echo $target | "$SED" 's/\(.*\)\[.*\]$/\1/' )

    owner="$meta"

    # Targetfolder must be defined, move on otherwise
    if [ -z "$targetfolder" ]; then
      echo "WARN: syntax error in EXPAND_S3_TARS"
      continue;
    fi


    # Create the containing directory, if necessary
    "$MKDIR" -p $targetfolder/

    # Run the extraction
    "$S3CMD" sync -r s3://$object $targetfolder/

    # Set the file and directory ownership, if applicable
    if [ $owner ]; then
      "$CHOWN" -R $owner $targetfolder
    fi
  done

  # Remove the Credentials
  "$RM" ~/.s3cfg
fi
# Unset the Environment
unset EXPAND_S3_KEY EXPAND_S3_SECRET EXPAND_S3_FILES EXPAND_S3_TARS EXPAND_S3_FOLDERS





# Finally, run sed on target files
# Space delimited list..
for var in $EXPAND_SED_FILES; do
  # If there is no bar ("|"), the entry is invalid; move on
  if ! echo $var | "$GREP" '|' 1>/dev/null; then
    echo "WARN: syntax error in EXPAND_SED_FILES; missing |"
    continue;
  fi

  # Separate out target file from the sed script to run on it
  target=$( echo $var | "$CUT" -d '|' -f 1)
  script=$( echo $var | "$CUT" -d '|' -f 2-)

  # We need both to be defined, move on otherwise
  if [ -z "$target" ] || [ -z "$script" ]; then
    echo "WARN: syntax error in EXPAND_SED_FILES"
    continue;
  fi

  "$SED" -i "$target" -f "$script"

done
# Unset the Environment
unset EXPAND_SED_FILES





exec "$@"
